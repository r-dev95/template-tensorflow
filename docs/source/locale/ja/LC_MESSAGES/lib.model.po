# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, r-dev95
# This file is distributed under the same license as the tensorflow-template
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tensorflow-template \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-06 21:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/lib.model.rst:2
msgid "model package"
msgstr ""

#: ../../source/lib.model.rst:11
msgid "base.py"
msgstr ""

#: lib.model.base:1 of
msgid "This is the module that defines the base model."
msgstr "ベースモデルを定義するモジュール。"

#: lib.model.base.check_params:1 of
msgid "Checks the :class:`BaseModel` parameters."
msgstr ":class:`BaseModel` のパラメータを確認する。"

#: ../../source/lib.model.rst
msgid "Parameters"
msgstr "パラメータ"

#: lib.model.base.BaseModel:9 lib.model.base.check_params:3 of
msgid "class list."
msgstr "クラスの一覧"

#: lib.model.base.BaseModel:1 of
msgid "Bases: :py:class:`~keras.src.models.model.Model`"
msgstr ""

#: lib.model.base.BaseModel:1 of
msgid "Defines the base model."
msgstr "ベースモデルを定義する。"

#: lib.model.base.BaseModel:3 of
msgid "You can customize :meth:`train_step` and :meth:`test_step` using ``.fit``."
msgstr "``.fit`` を使用しつつ、:meth:`train_step` と :meth:`test_step` をカスタマイズできる。"

#: lib.model.base.BaseModel:4 of
msgid ""
"In eager mode, you can output calculation results using ``print`` or "
"logging in :meth:`train_step`, :meth:`test_step`, or ``.call`` of class-"
"form models."
msgstr ""
"eagerモードの際、:meth:`train_step` や :meth:`test_step`、クラス形式のモデルの ``.call`` "
"内で ``print`` やlogging機能を使用して、計算結果を出力できる。"

#: lib.model.base.BaseModel:6 of
msgid ""
"In graph mode, you can output too. But you will need to implement a "
"custom layer that ``tf.print`` the input."
msgstr "graphモードでも出力できるが、入力を ``tf.print`` するようなカスタムレイヤーを実装するなど工夫が必要である。"

#: lib.model.base.BaseModel.update_metrics:1 of
msgid "Updates metrics."
msgstr "メトリクスを更新する。"

#: lib.model.base.BaseModel.update_metrics:3 of
msgid "tuple of labels, preds, losses, and sample_weight."
msgstr "ラベルと予測、誤差、入力ごとの重みのタプル。"

#: lib.model.base.BaseModel.metrics lib.model.base.BaseModel.test_step
#: lib.model.base.BaseModel.train_step lib.model.base.BaseModel.update_metrics
#: lib.model.layer.SetupLayer.conv2d lib.model.layer.SetupLayer.dense
#: lib.model.layer.SetupLayer.flatten lib.model.layer.SetupLayer.maxpool2d
#: lib.model.layer.SetupLayer.relu lib.model.layer.SetupLayer.setup
#: lib.model.setup.SetupModel.setup lib.model.setup.SetupModel.simple
#: lib.model.simple.SimpleModel.call of
msgid "Returns"
msgstr "戻り値"

#: lib.model.base.BaseModel.test_step:12 lib.model.base.BaseModel.train_step:13
#: lib.model.base.BaseModel.update_metrics:6 of
msgid "**dict[str, float]** -- all metrics results."
msgstr "**dict[str, float]** -- すべてのメトリクスの結果"

#: lib.model.base.BaseModel.metrics:1 of
msgid "Returns list of metrics classes."
msgstr "メトリクスクラスのリストを返す。"

#: lib.model.base.BaseModel.metrics:3 of
msgid "This function is decorated by ``@override`` and ``@property``."
msgstr "``@override`` と ``@property`` でデコレートされている。"

#: lib.model.base.BaseModel.metrics:5 of
msgid ""
"When using ``.fit`` or ``.evaluate``, Metrics must be run "
"``.reset_state`` at the start of an epoch. By setting the return value of"
" this method to a list of all metrics, it will automatically run "
"``.reset_state``."
msgstr ""
"``.fit`` や ``.evaluate`` を使用する際、エポックの開始時にメトリクスは ``.reset_state`` "
"を実行しなければならない。本メソッドの戻り値にすべてのメトリクスのリストを設定することで自動で ``.reset_state`` "
"が実行される。"

#: lib.model.base.BaseModel.metrics:10 of
msgid "**list[Callable]** -- list of metrics classes."
msgstr "**list[Callable]** -- メトリクスクラスのリスト"

#: lib.model.base.BaseModel.train_step:1 of
msgid "Trains the model one step at a time."
msgstr "1ステップ分モデルを学習する。"

#: lib.model.base.BaseModel.test_step:3 lib.model.base.BaseModel.train_step:3
#: of
msgid "This function is decorated by ``@override``."
msgstr "``@override`` でデコレートされている。"

#: lib.model.base.BaseModel.test_step:5 lib.model.base.BaseModel.train_step:5
#: of
msgid "Output predictions. (forward propagation)"
msgstr "予測を算出する。(順伝番: forward propagation)"

#: lib.model.base.BaseModel.test_step:6 lib.model.base.BaseModel.train_step:6
#: of
msgid "Output losses."
msgstr "誤差を算出する。"

#: lib.model.base.BaseModel.train_step:7 of
msgid "Output gradients and update model parameters. (back propagation)"
msgstr "勾配を算出し、モデルパラメータを更新する。(誤差逆伝播: back propagation)"

#: lib.model.base.BaseModel.test_step:7 lib.model.base.BaseModel.train_step:8
#: of
msgid "Update metrics."
msgstr "メトリクスを更新する。"

#: lib.model.base.BaseModel.test_step:9 lib.model.base.BaseModel.train_step:10
#: of
msgid "tuple of inputs and labels (and weights for each input)."
msgstr "入力とラベル(と入力ごとの重み)のタプル"

#: lib.model.base.BaseModel.test_step:1 of
msgid "Validations the model one step at a time."
msgstr "1ステップ分モデルを検証する。"

#: ../../source/lib.model.rst:19
msgid "layer.py"
msgstr ""

#: lib.model.layer:1 of
msgid "This is the module that sets up model layers."
msgstr "モデルレイヤーを設定するモジュール。"

#: lib.model.layer.check_params:1 of
msgid "Checks the :class:`SetupLayer` parameters."
msgstr ":class:`SetupLayer` のパラメータを確認する。"

#: lib.model.layer.SetupLayer:7 lib.model.layer.check_params:3
#: lib.model.setup.SetupModel:7 lib.model.setup.check_params:3
#: lib.model.simple.SimpleModel:6 lib.model.simple.check_params:3 of
msgid "parameters."
msgstr "パラメータ"

#: lib.model.layer.check_params:5 lib.model.setup.check_params:5 of
msgid "Class variables whose values are available methods."
msgstr "使用可能なメソッドを値に持つクラス変数。"

#: lib.model.layer.SetupLayer:1 lib.model.setup.SetupModel:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: lib.model.layer.SetupLayer:1 of
msgid "Sets up the model layer."
msgstr "モデルレイヤーを設定する。"

#: lib.model.layer.SetupLayer:3 lib.model.setup.SetupModel:3 of
msgid ""
"If you want to use some other settings, implement it as a method of this "
"class. If you implemented, set the name as the ``func`` key in "
"``__init__`` and the method as the value."
msgstr ""
"他の設定を使用したい場合、このクラスのメソッドとして実装する。実装した場合、``__init__`` の ``func`` "
"のキーに名前を、値にメソッドを実装すること。"

#: lib.model.layer.SetupLayer.setup:1 of
msgid "Sets up model layers."
msgstr "モデルレイヤーを設定する。"

#: lib.model.layer.SetupLayer.setup:3 of
msgid "**list[Callable]** -- list of model layers."
msgstr "**list[Callable]** -- モデルレイヤークラスのリスト"

#: lib.model.layer.SetupLayer.flatten:1 of
msgid "Sets ``keras.layers.Flatten``."
msgstr "``keras.layers.Flatten`` を設定する。"

#: lib.model.layer.SetupLayer.conv2d:3 lib.model.layer.SetupLayer.dense:3
#: lib.model.layer.SetupLayer.flatten:3 lib.model.layer.SetupLayer.maxpool2d:3
#: lib.model.layer.SetupLayer.relu:3 of
msgid "**Callable** -- model layer class."
msgstr "**Callable** -- モデルレイヤークラス"

#: lib.model.layer.SetupLayer.dense:1 of
msgid "Sets ``keras.layers.Dense``."
msgstr "``keras.layers.Dense`` を設定する。"

#: lib.model.layer.SetupLayer.conv2d:1 of
msgid "Sets ``keras.layers.Conv2D``."
msgstr "``keras.layers.Conv2D`` を設定する。"

#: lib.model.layer.SetupLayer.maxpool2d:1 of
msgid "Sets ``keras.layers.MaxPool2D``."
msgstr "``keras.layers.MaxPool2D`` を設定する。"

#: lib.model.layer.SetupLayer.relu:1 of
msgid "Sets ``keras.layers.ReLU``."
msgstr "``keras.layers.ReLU`` を設定する。"

#: ../../source/lib.model.rst:27
msgid "setup.py"
msgstr ""

#: lib.model.setup:1 of
msgid "This is the module that sets up model."
msgstr "モデルを設定するモジュール。"

#: lib.model.setup.check_params:1 of
msgid "Checks the :class:`SetupModel` parameters."
msgstr ":class:`SetupModel` のパラメータを確認する。"

#: lib.model.setup.SetupModel:1 lib.model.setup.SetupModel.setup:1 of
msgid "Sets up model."
msgstr "モデルを設定する。"

#: lib.model.setup.SetupModel.setup:3 lib.model.setup.SetupModel.simple:3 of
msgid "**Callable** -- model class."
msgstr "**Callable** -- モデルクラス"

#: lib.model.setup.SetupModel.simple:1 of
msgid "Sets :class:`lib.model.simple.SimpleModel`."
msgstr ":class:`lib.model.simple.SimpleModel` を設定する。"

#: ../../source/lib.model.rst:35
msgid "simple.py"
msgstr ""

#: lib.model.simple:1 of
msgid "This is the module that builds simple model."
msgstr "シンプルモデルを構築するモジュール。"

#: lib.model.simple.check_params:1 of
msgid "Checks the :class:`SimpleModel` parameters."
msgstr ":class:`SimpleModel` のパラメータを確認する。"

#: lib.model.simple.SimpleModel:1 of
msgid "Bases: :py:class:`~lib.model.base.BaseModel`"
msgstr ""

#: lib.model.simple.SimpleModel:1 of
msgid "Builds the following simple model."
msgstr "次のシンプルモデルを構築する。"

#: lib.model.simple.SimpleModel:3 of
msgid "MLP (Multi Layer Perceptron)"
msgstr "多層パーセプトロン(MLP: Multi Layer Perceptron)"

#: lib.model.simple.SimpleModel:4 of
msgid "CNN (Convolutional Neural Network)"
msgstr "畳み込みニューラルネットワーク (CNN: Convolutional Neural Network)"

#: lib.model.simple.SimpleModel:11 of
msgid ""
"Since the structure of a class-based model is not defined until input is "
"given, ``.summary`` cannot be used. For the same reason, trained weights "
"cannot be applied, so dummy data is input in ``__init__``."
msgstr ""
"クラス形式モデルの構造は入力が与えられるまで定義されないため、``.summary`` "
"が使用できない。同様に学習した重みを適用することができないため、``__init__`` でダミーデータを与える。"

#: lib.model.simple.SimpleModel.call:1 of
msgid "Outputs the model predictions."
msgstr "モデルの予測を出力する。"

#: lib.model.simple.SimpleModel.call:3 of
msgid "This method is decorated by ``@override``."
msgstr "``@override`` でデコレートされている。"

#: lib.model.simple.SimpleModel.call:5 of
msgid "input."
msgstr "入力"

#: lib.model.simple.SimpleModel.call:8 of
msgid "**tf.Tensor** -- output."
msgstr "**tf.Tensor** -- 出力"
